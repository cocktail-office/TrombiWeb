package org.cocktail.trombino;

// Generated by the WOLips Templateengine Plug-in at 18 sept. 2006 15:53:17

import org.cocktail.fwkcktlwebapp.server.CktlBrowserDetector;
import org.cocktail.fwkcktlwebapp.server.CktlWebSession;
import org.cocktail.trombino.metier.VDroitsLogin;

import com.webobjects.appserver.WOComponent;
import com.webobjects.eocontrol.EOQualifier;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSMutableArray;

public class Session extends CktlWebSession {

	protected Application app = (Application) Application.application();
	public LocalizedStringsManager strings;

	public static final int TROMBI_EC = 1;
	public static final int TROMBI_FORMATION = 2;
	public static final int TROMBI_DEPARTEMENT = 3;
	public static final int TROMBI_RECHERCHE = 4;

	public int typeTrombi = TROMBI_RECHERCHE;

	protected String mandatoryLanguage = null;

	private String login, nomPrenom, email;
	private Number noIndividu;

	public boolean isSearchEtudiant, isSearchParFormation, isSearchParEC, isSearchDept;
	public boolean shouldDisplayEC, shouldDisplayTrombiEC;

	private NSArray etudiants;
	private String trombinoPageTitle;

	ScolAjaxDataProvider dataProvider;
	FormationDataProvider formationDataProvider;
	AppLayoutHolder layoutHolder;

	VDroitsLogin droitLogin;
	private boolean showExtendedControls;

	public Session() {
		super();
		formationDataProvider = new FormationDataProvider(defaultEditingContext(), this);
		dataProvider = new ScolAjaxDataProvider(defaultEditingContext(), this);
		layoutHolder = new AppLayoutHolder();
	}

	public String sessionID() {
		return super.sessionID();
	}

	public String directActionsURI() {
		return app.getApplicationInstanceURL(context()) + "/wa/";
	}

	public String getPhotoUrl(Number noIndividu) {
		StringBuffer bfr = new StringBuffer(directActionsURI());
		bfr.append("photoEtudiantIndividu?noIndividu=");
		bfr.append(noIndividu.intValue());
		bfr.append("&sessionID=");
		bfr.append(sessionID());
		return bfr.toString();
	}

	public String getPhotoUrlForReport() {
		// StringBuffer bfr = new StringBuffer(directActionsURI());
		// bfr.append("photoEtudiantNumero?sessionID=");
		// bfr.append(sessionID());
		// bfr.append("&etudNumero=");
		StringBuffer bfr = new StringBuffer(app.config().stringForKey("IMAGE_SERVER_URL"));
		bfr.append("photoEtudiantNumero?acces=");
		bfr.append(app.config().stringForKey("ACCES_IMAGE_SERVER"));
		bfr.append("&etudNumero=");
		return bfr.toString();
	}

	public ScolAjaxDataProvider scolAjaxDataProvider() {
		return dataProvider;
	}

	public FormationDataProvider formationDataProvider() {
		return formationDataProvider;
	}

	public AppLayoutHolder layoutHolder() {
		return layoutHolder;
	}

	public VDroitsLogin droitLogin() {
		return droitLogin;
	}

	public boolean hasDroitsFormations() {
		return droitLogin != null;
	}

	public boolean isIE() {
		CktlBrowserDetector browserDetect = new CktlBrowserDetector(context());
		String currentBrowser = browserDetect.getBrowser();
		boolean isIE = currentBrowser.equals(CktlBrowserDetector.BROWSER_MSIE);
		return isIE;
	}

	public int getTypeTrombi() {
		return typeTrombi;
	}

	public void setTypeTrombi(int typeTrombi) {

		isSearchEtudiant = false;
		isSearchParFormation = false;
		isSearchParEC = false;
		isSearchDept = false;
		shouldDisplayEC = false;
		shouldDisplayTrombiEC = false;

		this.typeTrombi = typeTrombi;
		if (this.typeTrombi == TROMBI_RECHERCHE) {
			isSearchEtudiant = true;
		}
		if (this.typeTrombi == TROMBI_FORMATION) {
			isSearchParFormation = true;
		}
		if (this.typeTrombi == TROMBI_EC) {
			isSearchParEC = true;
		}
		if (this.typeTrombi == TROMBI_DEPARTEMENT) {
			isSearchDept = true;
		}
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getLogin() {
		return login;
	}

	public void setLogin(String login) {
		this.login = login;

		if (login != null) {
			droitLogin = (VDroitsLogin) DBHandler.fetchUniqueData(defaultEditingContext(), "VDroitsLogin", "dlogLogin", login);
		}
	}

	public Number getNoIndividu() {
		return noIndividu;
	}

	public void setNoIndividu(Number noIndividu) {
		this.noIndividu = noIndividu;
	}

	public String getNomPrenom() {
		return nomPrenom;
	}

	public void setNomPrenom(String nomPrenom) {
		this.nomPrenom = nomPrenom;
	}

	//
	public void chargerDroitsUtilisateur() {

	}

	public void rechercherEtudiant(String nom) {
		isSearchEtudiant = true;
		EOQualifier qualEtudiants = EOQualifier.qualifierWithQualifierFormat("individuUlr.nomUsuel caseInsensitiveLike '" + nom.trim().toUpperCase()
				+ "*'", null);
		// EOSortOrdering sortEtudiant = new EOSortOrdering("individuUlr.nomUsuel", EOSortOrdering.CompareCaseInsensitiveAscending);
		etudiants = DBHandler.fetchData(defaultEditingContext(), "Etudiant", qualEtudiants);
	}

	public NSArray etudiantsTrouves() {
		return etudiants;
	}

	public String getTrombinoPageTitle() {
		return trombinoPageTitle;
	}

	public void setTrombinoPageTitle(String trombinoPageTitle) {
		this.trombinoPageTitle = trombinoPageTitle;
	}

	public void setShouldDisplayEC(boolean tf) {
		this.shouldDisplayEC = tf;
		this.shouldDisplayTrombiEC = !tf;

	}

	public boolean shouldDisplayEC() {
		return shouldDisplayEC;
	}

	public void setShouldDisplayTrombiEC(boolean tf) {
		this.shouldDisplayTrombiEC = tf;
		this.shouldDisplayEC = !tf;
	}

	public boolean shouldDisplayTrombiEC() {
		return shouldDisplayTrombiEC;
	}

	// TODO ajout du 27/03/2006
	public void createLocalizedStringsManager(WOComponent component) {
		if (mandatoryLanguage == null) {
			mandatoryLanguage = app.config().stringForKey("MANDATORY_LANGUAGE");
		}

		String langs = app.config().stringForKey("LANGUAGE_LIST");
		NSMutableArray languages = NSArray.componentsSeparatedByString(langs.trim(), ",").mutableClone();

		NSArray availableLanguages = null;

		// on force la langue choisie comme obligatoire
		if (mandatoryLanguage != null && !mandatoryLanguage.equals("")) {
			languages.removeObject(mandatoryLanguage);
			languages.insertObjectAtIndex(mandatoryLanguage, 0);
			availableLanguages = languages.immutableClone();
		}
		else { // on utilise la locale du navigateur
			availableLanguages = languages();
		}

		setLanguages(availableLanguages);
		strings = new LocalizedStringsManager(app.name(), component.name(), app.resourceManager(), availableLanguages);
	}

	public void setMandatoryLanguage(String lang) {
		mandatoryLanguage = lang;
	}

	public String mandatoryLanguage() {
		return mandatoryLanguage;
	}

	public boolean showExtendedControls() {
		return showExtendedControls;
	}

	public void setShowExtendedControls(boolean val) {
		this.showExtendedControls = val;
	}

}