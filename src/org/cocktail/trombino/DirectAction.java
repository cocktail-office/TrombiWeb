package org.cocktail.trombino;

// Generated by the WOLips Templateengine Plug-in at 18 sept. 2006 15:53:17

import java.net.URL;
import java.util.Enumeration;

import org.cocktail.fwkcktlwebapp.server.CktlDataResponse;
import org.cocktail.fwkcktlwebapp.server.CktlResourceManager;
import org.cocktail.fwkcktlwebapp.server.CktlWebAction;
import org.cocktail.fwkcktlwebapp.server.components.CktlAlertPage;

import com.webobjects.appserver.WOActionResults;
import com.webobjects.appserver.WOApplication;
import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WORequest;
import com.webobjects.appserver.WOSessionStore;
import com.webobjects.eocontrol.EOFetchSpecification;
import com.webobjects.eocontrol.EOGenericRecord;
import com.webobjects.eocontrol.EOQualifier;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSData;
import com.webobjects.foundation.NSDictionary;

public class DirectAction extends CktlWebAction {

	Application app = (Application) WOApplication.application();

	public DirectAction(WORequest aRequest) {
		super(aRequest);
	}

	public WOActionResults defaultAction() {
		if (useCasService()) {
			if (cktlSession().connectedUserInfo() == null) {
				return pageWithName(LoginCAS.class.getName());
			}
			return pageWithName(StartPage.class.getName());
		}
		return pageWithName(LoginLocal.class.getName());
	}

	public WOActionResults loginAction() {
		return pageWithName(Main.class.getName());
	}

	// Invoquee par Ajax :
	// Renvoie les formations formatees pour traitement par JavaScript (fspnKey1*libelle1|fspnKey2*libelle2|...)

	public WOActionResults getFormationsAction() {
		// A ESSAYER
		WORequest aRequest = request();

		String annee = aRequest.stringFormValueForKey("annee");
		String grade = aRequest.stringFormValueForKey("grade");
		String niveau = aRequest.stringFormValueForKey("niveau");
		String sessionID = aRequest.stringFormValueForKey("sessionID");

		WOSessionStore sessionStore = app.sessionStore();
		Session session = (Session) sessionStore.restoreSessionWithID(sessionID, null);
		String formations = "";
		if (session != null) {
			ScolAjaxDataProvider ajaxDataProvider = session.scolAjaxDataProvider();
			formations = ajaxDataProvider.getFormations(grade, niveau, annee, session.formationDataProvider().fspnKey());
		}

		CktlDataResponse response = new CktlDataResponse();
		response.setContent(formations.getBytes(), CktlDataResponse.MIME_HTML);

		return response;
	}

	// Invoquee par Ajax :
	// Renvoie les specialisations pour traitement par JavaScript

	public WOActionResults getSpecialisationsAction() {
		WORequest aRequest = request();
		String annee = aRequest.stringFormValueForKey("annee");
		String sessionID = aRequest.stringFormValueForKey("sessionID");
		int fannKey = FormatHandler.strToInt(annee);

		WOSessionStore sessionStore = app.sessionStore();
		Session session = (Session) sessionStore.restoreSessionWithID(sessionID, null);

		String departements = "";
		if (session != null) {
			ScolAjaxDataProvider ajaxDataProvider = session.scolAjaxDataProvider();
			departements = ajaxDataProvider.getDepartementsSpe(fannKey, session.formationDataProvider().specialisationDpt());
		}

		CktlDataResponse response = new CktlDataResponse();
		response.setContent(departements.getBytes(), CktlDataResponse.MIME_HTML);

		return response;
	}

	public WOActionResults photoEtudiantIndividuAction() {
		WORequest aRequest = this.request();
		CktlDataResponse myResp = new CktlDataResponse();

		CktlResourceManager resBundle = new CktlResourceManager();

		URL photoVide = null;
		NSData laPhoto = null;
		String id = aRequest.stringFormValueForKey("noIndividu");
		String sessionID = aRequest.stringFormValueForKey("sessionID");

		if (sessionID != null && !sessionID.equals("")) {
			Number noIndividu = new Integer(id);
			Session session = (Session) app.restoreSessionWithID(sessionID, context());
			if (noIndividu != null && session != null) {
				NSArray entityNames = NSArray.componentsSeparatedByString(cktlApp.config().stringForKey("NOM_TABLE_IMAGE"), ",");
				EOQualifier myQualifier = EOQualifier.qualifierWithQualifierFormat("noIndividu = %@"
						+ (app.bypassIndphotoFlag ? "" : " and individuUlr.indPhoto='O'"), new NSArray(noIndividu));
				Enumeration<String> enumeration = entityNames.objectEnumerator();
				NSArray myResult = null;
				// dès que l'on a une photo, on l'affiche. Sinon, on essai dans la table suivante...
				while (enumeration.hasMoreElements()) {
					try {
						String anEntityName = enumeration.nextElement();
						EOFetchSpecification myFetch = new EOFetchSpecification(anEntityName, myQualifier, null);
						myResult = session.defaultEditingContext().objectsWithFetchSpecification(myFetch);
					}
					catch (Exception e) {
						myResult = null;
					}
					if (myResult != null && myResult.count() > 0) {
						EOGenericRecord record = (EOGenericRecord) myResult.objectAtIndex(0);
						if (record.valueForKey("datasPhoto") != null) {
							laPhoto = (NSData) record.valueForKey("datasPhoto");
							break;
						}
					}
				}
			}

		} // verification criteres

		// pas de photo on met l'image "aucune photo"
		if (laPhoto == null) {
			try {
				photoVide = new URL("file:///" + resBundle.pathForResource("no_photo.gif"));
				laPhoto = new NSData(photoVide);
			}
			catch (Exception e) {
				e.printStackTrace();
			}
		}

		// on test la photo si elle fonctionne, essai d'affichage
		try {
			// new ImageIcon(laPhoto.bytes());
		}
		catch (Throwable e) {
			try {
				photoVide = new URL("file:///" + resBundle.pathForResource("no_photo.gif"));
				laPhoto = new NSData(photoVide);
			}
			catch (Throwable e2) {
				laPhoto = new NSData();
			}
		}

		// On construit la reponse
		myResp.setContent(laPhoto, "image/jpeg");
		return myResp;
	}

	// public WOActionResults photoEtudiantNumeroAction() {
	// WORequest aRequest = this.request();
	// CktlDataResponse myResp = new CktlDataResponse();
	//
	// CktlResourceManager resBundle = app.appResources();
	//
	// URL photoVide = null;
	// NSData laPhoto = null;
	// String id = aRequest.stringFormValueForKey("etudNumero");
	// String sessionID = aRequest.stringFormValueForKey("sessionID");
	//
	// if (sessionID != null && !sessionID.equals("")) {
	// Number etudNumero = new Integer(id);
	// Session session = (Session) app.restoreSessionWithID(sessionID, context());
	// if (etudNumero != null && session != null) {
	// EOQualifier myQualifier = EOQualifier.qualifierWithQualifierFormat("etudiant.etudNumero = %@ and individuUlr.indPhoto='O'",
	// new NSArray(etudNumero));
	// NSArray entityNames = NSArray.componentsSeparatedByString(cktlApp.config().stringForKey("NOM_TABLE_IMAGE"), ",");
	// Enumeration<String> enumeration = entityNames.objectEnumerator();
	// NSArray myResult = null;
	// // dès que l'on a une photo, on l'affiche. Sinon, on essai dans la table suivante...
	// while (enumeration.hasMoreElements()) {
	// try {
	// String anEntityName = enumeration.nextElement();
	// EOFetchSpecification myFetch = new EOFetchSpecification(anEntityName, myQualifier, null);
	// myResult = session.defaultEditingContext().objectsWithFetchSpecification(myFetch);
	// }
	// catch (Exception e) {
	// myResult = null;
	// }
	// if (myResult != null && myResult.count() > 0) {
	// EOGenericRecord record = (EOGenericRecord) myResult.objectAtIndex(0);
	// if (record.valueForKey("datasPhoto") != null) {
	// laPhoto = (NSData) record.valueForKey("datasPhoto");
	// break;
	// }
	// }
	// }
	// }
	// }
	//
	// // pas de photo on met l'image "aucune photo"
	// if (laPhoto == null) {
	// try {
	// photoVide = new URL("file:///" + resBundle.pathForResource("no_photo.gif"));
	// laPhoto = new NSData(photoVide);
	// }
	// catch (Exception e) {
	// e.printStackTrace();
	// }
	// }
	// // On construit la reponse
	// myResp.setContent(laPhoto, "image/jpeg");
	// return myResp;
	// }

	public WOActionResults loginCasSuccessPage(String arg0, @SuppressWarnings("unused") NSDictionary arg1) {
		if (arg0 == null) {
			return loginCasFailurePage("Aucun login !!!", "");
		}
		Session session = (Session) context().session();
		session.setConnectedUser(arg0);
		String error = LoginLocal.setUserInfo(session.connectedUserInfo(), session);
		if (error != null) {
			return loginCasFailurePage("Erreur lors de l'authentification", error);
		}
		return session.getSavedPageWithName(StartPage.class.getName());
	}

	private WOComponent getErrorPage(String errorMessage) {
		CktlAlertPage page = (CktlAlertPage) cktlApp.pageWithName(CktlAlertPage.class.getName(), context());
		page.showMessage(null, "ERREUR", errorMessage, null, null, null, CktlAlertPage.ERROR, null);
		return page;
	}

	public WOActionResults loginCasFailurePage(String arg0, String arg1) {
		StringBuffer msg = new StringBuffer();
		msg.append("Une erreur s'est produite lors de l'authentification de l'utilisateur&nbsp;:<br><br>");
		if (arg0 != null) {
			msg.append("&nbsp;:<br><br>").append(arg0);
		}
		return getErrorPage(msg.toString());
	}

	public WOActionResults loginNoCasPage(@SuppressWarnings("unused") NSDictionary arg0) {
		return getErrorPage("Authentification Impossible !!!<br><br>Aucun service C.A.S. trouvé !!!");
	}

	public WOComponent pageSuivanteAction() {
		session();
		int newMin = min() + TrombinoViewer.MAX_PAR_PAGE;
		if (newMin > TrombinoViewer.MAX_PAR_PAGE) {
			newMin = TrombinoViewer.MAX_PAR_PAGE;
		}
		setMin(newMin);
		return (WOComponent) session().objectForKey("PAGE_EN_COURS");
	}

	public void setMin(int i) {
		session().setObjectForKey(new Integer(i), TrombinoViewer.MIN_PAGE);
	}

	public int min() {
		if (session().objectForKey(TrombinoViewer.MIN_PAGE) == null) {
			return 0;
		}
		return ((Integer) session().objectForKey(TrombinoViewer.MIN_PAGE)).intValue();
	}

}